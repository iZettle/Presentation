%YAML 1.2
---

version: 2.1

anchors: 
  - &test_device "iPhone 15"
  - &test_device_os "18.1"
  - &clean_before_build true
  - &test_output_folder test_output
  - &default_executor
    macos:
      xcode: "16.0.0"

env:
  global:
    - LC_CTYPE=en_US.UTF-8
    - LANG=en_US.UTF-8

commands:
  pod-install:
    parameters:
      path:
        type: string
    steps:
      - run:
          command: | 
            cd <<parameters.path>>
            pod install --verbose

  test_main_project:
    parameters:
      simulator:
        type: string
        default: *test_device
      os_version:
        type: string
        default: *test_device_os
    steps:
      - checkout
      - test_project_and_store_results:
          project: "Presentation.xcodeproj"
          scheme: "Presentation"
          simulator: <<parameters.simulator>>
          os_version: <<parameters.os_version>>

  test_example_project:
    parameters:
      path: # We need to pass a path here because the example projects are in a sub folder of the project
        type: string
    steps:
      - checkout
      - pod-install:
          path: <<parameters.path>>
      - test_workspace_and_store_results:
          workspace: "Example.xcworkspace"
          scheme: "Example"
          path: <<parameters.path>>
          test_output_folder: *test_output_folder
          simulator: *test_device
          os_version: *test_device_os

  # We introduced two separate commands for projects and workspaces because we didnt find a generic and non-confusing way to introduce 
  # a condition to only pass either the project or the workspace environment argument to the fastlane scan
  test_project_and_store_results:
    description: "Builds and tests a project and then stores the results of the tests as artifacts and test results report"
    parameters:
      project:
        type: string
      scheme:
        type: string
    steps:
      - run:
          command: fastlane scan
          environment:
              SCAN_PROJECT: <<parameters.project>>
              SCAN_SCHEME: <<parameters.scheme>>
              SCAN_DEVICE: *test_device
              SCAN_CLEAN: *clean_before_build
      - store_artifacts: # This will by default store an html and junit file as artifacts (See "Artifacts" tab in CircleCI report)
          path: *test_output_folder # test_output is the default temporary folder for fastlane scan output
          destination: *test_output_folder # This will create a sub structure in the artifacts section in CircleCI
      - store_test_results: # This will store the test results so you can then see them in the "Test Summary" tab in CircleCI report
          path: *test_output_folder

  test_workspace_and_store_results:
    description: "Builds and tests a workspace and then stores the results of the tests as artifacts and test results report"
    parameters:
      workspace:
        type: string
      scheme:
        type: string
      path:
        type: string
      test_output_folder:
        type: string
      simulator:
        type: string
        default: *test_device
    steps:
      - run:
          command:  |
            cd <<parameters.path>>
            fastlane scan
          environment:
              SCAN_WORKSPACE: <<parameters.workspace>>
              SCAN_SCHEME: <<parameters.scheme>>
              SCAN_DEVICE: <<parameters.simulator>>
              SCAN_CLEAN: *clean_before_build
      - store_artifacts: # This will by default store an html and junit file as artifacts (See "Artifacts" tab in CircleCI report)
          path: <<parameters.path>>/<<parameters.test_output_folder>> # test_output is the default temporary folder for fastlane scan output
          destination: <<parameters.test_output_folder>> # This will create a sub structure in the artifacts section in CircleCI
      - store_test_results: # This will store the test results so you can then see them in the "Test Summary" tab in CircleCI report
          path: <<parameters.path>>/<<parameters.test_output_folder>>

jobs:
  swiftlint:
    parameters:
      version:
        type: string
    <<: *default_executor
    steps:
      - attach_workspace:
          at: .
      - checkout
      - run:
          name: Install SwiftLint(<< parameters.version >>)
          command: |
            curl -L -k -o /Users/distiller/Downloads/SwiftLint.pkg https://github.com/realm/SwiftLint/releases/download/<< parameters.version >>/SwiftLint.pkg
            sudo installer -pkg /Users/distiller/Downloads/SwiftLint.pkg -target /
      # Run SwiftLint.
      - run:
          name: Lint Codebase
          command: |
            swiftlint version && swiftlint --strict --reporter html > swiftlint.html
      - store_artifacts:
          path: swiftlint.html
          destination: swiftlint.html
      - store_test_results:
          path: swiftlint.html

  test-xcode16-ios18:
    <<: *default_executor
    steps:
      - test_main_project

  test-xcode15-ios17:
    macos:
      xcode: "15.0.0"
    steps:
      - test_main_project:
        simulator: "iPhone 15"
        os_version: "17.0"
  
  test-example-messages:
    macos:
      xcode: "14.0.0"
    steps:
      - test_example_project:
          path: Examples/Messages

  test-example-styles-and-options:
    macos:
      xcode: "14.0.0"
    steps:
      - test_example_project:
          path: Examples/StylesAndOptions

workflows:
  version: 2.1
  build-and-test:
    jobs:
      - swiftlint:
          version: 0.52.2
      - test-xcode16-ios18
      - test-xcode15-ios17
      - test-example-messages
      # Temporary disabled need to be addressed, there are issues in Flow that might fix this thouh example failiure bellow
      # https://app.circleci.com/pipelines/github/iZettle/Presentation/312/workflows/f408abd8-d1ec-46d9-af4d-63f2eb794869/jobs/1195
      # - test-example-styles-and-options
      
